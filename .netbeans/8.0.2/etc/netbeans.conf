
# Default locations of userdir and cachedir:
# (http://wiki.netbeans.org/FaqWhatIsUserdir)
#
# On Windows ${DEFAULT_USERDIR_ROOT} will be replaced [...] (Edited by AG 2015-08-14)
#
# On other systems ${DEFAULT_USERDIR_ROOT} will be replaced by the launcher
# with "~/.netbeans" and ${DEFAULT_CACHEDIR_ROOT} with "~/.cache/netbeans"
#
# You can also use ${HOME} variable which will be replaced with
# user.home JVM system property value. This variable is valid only in
# netbeans_default_userdir and netbeans_default_cachedir properties.
#
# NOTE: If you specify a non-default userdir path on command line
# (--userdir option) and don't specify a cachedir path (--cachedir option),
# cachedir will be in "<userdir>/var/cache".
#
# Cachedir must be different from userdir. The same cachedir and userdir
# would cause problems.
#
netbeans_default_userdir="${DEFAULT_USERDIR_ROOT}/8.0.2"
netbeans_default_cachedir="${DEFAULT_CACHEDIR_ROOT}/8.0.2"

# Options used by NetBeans launcher by default:
# (can be overridden by explicit command line switches)
#
# Note that default -Xmx is selected for you automatically.
# You can find these values in var/log/messages.log file in your userdir.
# The automatically selected value can be overridden by specifying -J-Xmx
# here or on the command line.
#
# If you specify the heap size explicitly, you may also want to enable
# Concurrent Mark & Sweep garbage collector.
# (see http://wiki.netbeans.org/FaqGCPauses)
#
# AG 2015-08-14 original options:
#netbeans_default_options="-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.java2d.dpiaware=true -J-Dsun.zip.disableMemoryMapping=true"

# AG 2015-08-14 importing options from older netbeans installations.
# Summary of most relevant options and descriptions follows: (See http://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html)
#    -Xss: thread stack size. Default: 256 KB (Linux x86_64)
#    -Xms: initial and minimum Java heap size. Default: 25% of the amount of free physical memory in the system, up to 16 MB and at least 8 MB (-client mode)
#    -Xmx: maximum Java heap size. Default: 50% of available physical memory up to 2 GB (R27.3+, Linux x86_64)
#    # -XX:PermSize=size
#          This option was deprecated un JDK 8, and superseded by the -XX:MetaspaceSize option.
#          It was: Sets the space (in bytes) allocated to the permanent generation that triggers a garbage collection if it is exceeded.
#    # -XX:MaxPermSize=size
#          This option was deprecated in JDK 8, and superseded by the -XX:MaxMetaspaceSize option.
#          It was: Sets the maximum permanent generation space size (in bytes).
#    # -XX:MaxMetaspaceSize
#          Sets the maximum amount of native memory that can be allocated for class metadata. By default, the size is not limited. 
#    -Xverify: mode of the bytecode verifier. Bytecode verification helps to troubleshoot some problems, but it also adds overhead to the running application.
#          none: Do not verify the bytecode. This reduces startup time and also reduces the protection provided by Java.
#    -XX:+UseConcMarkSweepGC
#          Enables the use of the CMS garbage collector for the old generation.
#          Oracle recommends that you use the CMS garbage collector when application latency requirements cannot be met by the throughput (-XX:+UseParallelGC) garbage collector. The G1 garbage collector (-XX:+UseG1GC) is another alternative.
#          AG 2015-08-14:
#              From internet research, it looks like the CMS (Concurrent Mark and Sweep) is much more efficient than the G1 collector. The latter having a slightly better latency.
#              The ParallelGC reaches the best performance at the cost of many "stop the world" (STW) pauses. Not what I want for my IDE
#    -XX:+CMSClassUnloadingEnabled
#          Enables class unloading when using the concurrent mark-sweep (CMS) garbage collector. This option is enabled by default.
#          AG 2015-08-14:
#              If false, java won't claim the memory reserved for the metadata of classes that aren't used anymore.
#              In cases where a lot of dynamic classes are created, this is a problem.
#              See http://stackoverflow.com/questions/3334911/what-does-jvm-flag-cmsclassunloadingenabled-actually-do
#    --laf com.sun.java.swing.plaf.windows.WindowsLookAndFeel
#          AG 2015-08-14:
#              I have used this laf up to NB 8.0.1 for consistency and some issues when rendering menus with other laf
#    # -Dapple.laf.useScreenMenuBar=true -Dapple.awt.graphics.UseQuartz=true
#          AG 2015-08-17: Mac specifics
#    # -Dsun.java2d.noddraw=true
#          Obsoleted in Java SE 6 Update 10
#          Intended use: To turn off the Java 2D system's use of DirectDraw and Direct3D completely (sometimes helps to get rid of rendering problems on Win32).
#          See http://docs.oracle.com/javase/8/docs/technotes/guides/2d/flags.html#noddraw
#    # -Dsun.java2d.dpiaware=true
#          AG 2015-08-17:
#              Apparently added to fix wrong font rendering in Windows. See https://netbeans.org/bugzilla/show_bug.cgi?id=221303
#    -Dawt.useSystemAAFontSettings=lcd_hrgb # -Dswing.aatext=true # -Dorg.netbeans.editor.aa.extra.hints=true
#          AG 2015-08-14:
#              Some tweeks I had to set to fix and improve rendering of text
#              AG: I notice NO difference switching either -Dswing.aatext or -Dorg.netbeans.editor.aa.extra.hints
#              See http://wiki.netbeans.org/FaqFontRendering
#              See https://dzone.com/articles/fuf-tim-boudreau
#    -Dsun.java2d.opengl=True
#          Enable the OpenGL-based pipeline, which provides hardware acceleration. See http://docs.oracle.com/javase/8/docs/technotes/guides/2d/flags.html#opengl
#          Default value: false. 'True' to receive verbose console output about whether the OpenGL-based pipeline is initialized successfully for a particular screen.
#    -Dsun.zip.disableMemoryMapping
#          Allows the user to disable the mmap usage in Sun's java.util.zip.Zipfile implementation (on Solaris and Linux platforms).
#          Solaris or Linux applications that use java.util.zip.ZipFile may experience a SIGBUS VM crash if the application accidentally overwrites any zip or jar files
#          that are still being used by the same Java runtime. Although this is a programming error of the offending application, this system property provides a
#          solution to avoid the VM crash.
#          With the property set to true the Sun JDK/JRE runtime disables the mmap usage and the VM crash that might otherwise occur by overwriting the jar or zip file can be avoided.
#    -Dnetbeans.winsys.statusLine.in.menuBar=true
#          AG 2014.09.18: "You can gain a row of screen real-estate by passing..." [http://netbeans.dzone.com/articles/fuf-tim-boudreau]
#
netbeans_default_options="-J-client -J-Xss2m -J-Xms8g  -J-Xmx16g -J-Xverify:none -J-XX:+UseConcMarkSweepGC -J-XX:+CMSClassUnloadingEnabled  -J-Dawt.useSystemAAFontSettings=lcd_hrgb -J-Dsun.java2d.opengl=True -J-Dsun.zip.disableMemoryMapping=true -J-Dnetbeans.winsys.statusLine.in.menuBar=true"

# Default location of JDK:
# (set by installer or commented out if launcher should decide)
#
# It can be overridden on command line by using --jdkhome <dir>
# Be careful when changing jdkhome.
# There are two NetBeans launchers for Windows (32-bit and 64-bit) and
# installer points to one of those in the NetBeans application shortcut 
# based on the Java version selected at installation time.
#
#netbeans_jdkhome="/opt/oracle-jdk-bin-1.8.0.45"
netbeans_jdkhome="$JAVA_HOME"


# Additional module clusters:
# using ${path.separator} (';' on Windows or ':' on Unix):
#
#netbeans_extraclusters="/absolute/path/to/cluster1:/absolute/path/to/cluster2"

